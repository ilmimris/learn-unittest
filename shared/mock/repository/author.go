// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/author/repository/author.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ilmimris/learn-unittest/domain/model"
)

// MockAuthorRepository is a mock of AuthorRepository interface.
type MockAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryMockRecorder
}

// MockAuthorRepositoryMockRecorder is the mock recorder for MockAuthorRepository.
type MockAuthorRepositoryMockRecorder struct {
	mock *MockAuthorRepository
}

// NewMockAuthorRepository creates a new mock instance.
func NewMockAuthorRepository(ctrl *gomock.Controller) *MockAuthorRepository {
	mock := &MockAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepository) EXPECT() *MockAuthorRepositoryMockRecorder {
	return m.recorder
}

// FetchAuthorByID mocks base method.
func (m *MockAuthorRepository) FetchAuthorByID(ctx context.Context, id int64) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAuthorByID", ctx, id)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuthorByID indicates an expected call of FetchAuthorByID.
func (mr *MockAuthorRepositoryMockRecorder) FetchAuthorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuthorByID", reflect.TypeOf((*MockAuthorRepository)(nil).FetchAuthorByID), ctx, id)
}
