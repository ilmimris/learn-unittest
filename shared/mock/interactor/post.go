// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/posts/interactor/post.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/ilmimris/learn-unittest/domain/service"
)

// MockPostInteractor is a mock of PostInteractor interface.
type MockPostInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockPostInteractorMockRecorder
}

// MockPostInteractorMockRecorder is the mock recorder for MockPostInteractor.
type MockPostInteractorMockRecorder struct {
	mock *MockPostInteractor
}

// NewMockPostInteractor creates a new mock instance.
func NewMockPostInteractor(ctrl *gomock.Controller) *MockPostInteractor {
	mock := &MockPostInteractor{ctrl: ctrl}
	mock.recorder = &MockPostInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostInteractor) EXPECT() *MockPostInteractorMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostInteractor) CreatePost(ctx context.Context, title, content string, authorID int64) (*service.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, title, content, authorID)
	ret0, _ := ret[0].(*service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostInteractorMockRecorder) CreatePost(ctx, title, content, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostInteractor)(nil).CreatePost), ctx, title, content, authorID)
}

// DeletePost mocks base method.
func (m *MockPostInteractor) DeletePost(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostInteractorMockRecorder) DeletePost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostInteractor)(nil).DeletePost), ctx, id)
}

// GetPost mocks base method.
func (m *MockPostInteractor) GetPost(ctx context.Context, id int64) (*service.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(*service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostInteractorMockRecorder) GetPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostInteractor)(nil).GetPost), ctx, id)
}

// GetPosts mocks base method.
func (m *MockPostInteractor) GetPosts(ctx context.Context) ([]*service.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]*service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostInteractorMockRecorder) GetPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostInteractor)(nil).GetPosts), ctx)
}

// UpdatePost mocks base method.
func (m *MockPostInteractor) UpdatePost(ctx context.Context, id int64, title, content string) (*service.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, id, title, content)
	ret0, _ := ret[0].(*service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostInteractorMockRecorder) UpdatePost(ctx, id, title, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostInteractor)(nil).UpdatePost), ctx, id, title, content)
}
